function feature = MFCC_pcwise_clwise(rawdata,Fs,sg1r,sg2r,f3r,sg1t,sg2t,f3t,CATS,sfs,alpha,beta)
% function feature = MFCC_pcwise_clwise(rawdata,Fs,sg1r,sg2r,f3r,sg1t,sg2t,f3t,SFS)

winlen      = 25;             % window length in ms           
winshft     = 10;             % window shift in ms
cepnum      = 12;             % order of cepstral coefficients used (C0 - Ccepnum)
liftercoe   = 22;             % liftering coefficient
numchan     = 26;             % number of filters in the Mel filter bank
preemcoeff  = 0.97;           % coefficient for pre-emphasis
deltawindow = 2;              % window length to calculate 1st derivative
accwindow   = 2;              % window length to calculate 2nd derivative
C0          = 1;              % to use zeroth cepstral coefficient or not 

input = rawdata;
fsamp = Fs;
winlen = round(winlen * 10^(-3) * fsamp);
winshft = winshft * 10^(-3) * fsamp;
if isempty(whos('FrameNo'))
    FrameNo = ceil((length(input) - winlen) / winshft);
end
nfft = 2*(2^nextpow2(winlen)); % FFT size

% initialize MEL filter bank
fbank = initfiltb(numchan, fsamp, nfft);

% lifter weights
lifter = (1 + (liftercoe/2)*sin((pi/liftercoe)*(0:cepnum)) );

% pre-emphasis
a = [1 0];  % denominator polynomial
b = [1 -preemcoeff];    % numerator   polynomial
preem = filter(b, a, input);

% converting signal to frames
frmwin = sig2fm(preem, winlen, winshft, FrameNo);      
[winlen, framenum] = size(frmwin); % each column is a frame

% Hamming window each frame
frmwin = frmwin .* (hamming(winlen) * ones(1, framenum));

% Log energy
LE = log(sum(frmwin.*frmwin));

% frequency warping
NuDFT = zeros(nfft/2,framenum);

% for k = 1:size(SFS,1)
%     Basis = get_basis(Fs,nfft,winlen,sg1r,sg2r,f3r,sg1t*SFS(k,3),sg2t*SFS(k,4),f3t*SFS(k,5));
%     NuDFT(:,SFS(k,1):SFS(k,2)) = Basis*frmwin(:,SFS(k,1):SFS(k,2));
% end

Basis_pcwise = get_basis_pcwise(Fs,nfft,winlen,sg1r,sg2r,f3r,sg1t*sfs(1),sg2t*sfs(2),f3t*sfs(3));
Basis_linear = get_basis_linear(nfft,winlen,alpha,beta);
for k = 1:size(CATS,1)
    if(CATS(k,3) == 1)
        NuDFT(:,CATS(k,1):CATS(k,2)) = Basis_pcwise*frmwin(:,CATS(k,1):CATS(k,2));
    else
        NuDFT(:,CATS(k,1):CATS(k,2)) = Basis_linear*frmwin(:,CATS(k,1):CATS(k,2));
    end
end

DFTmag = abs(NuDFT);

% MEL filtering 
fb = fbank*DFTmag;

% take logarithm of MEL filter output
fbfloor = mean(mean(fb)) * 0.00001;  
logfb = log(max(fb, fbfloor*rand(size(fb))));

% take DCT
mfcco = dct(logfb);
if C0
    mfcco = mfcco(1 : cepnum + 1, :);
else
    mfcco = [LE;mfcco(2 : cepnum + 1, :)];
    %lifter = lifter(2 : end);
end

% do liftering with a lifted sin wave
mfcco = mfcco .* (lifter' * ones(1, framenum));

% calculate 1st derivative (velocity)
dt1 = deltacc(mfcco, deltawindow);

% calculate 2nd derivative (acceleration)
dt2 = deltacc(dt1, accwindow);

% append dt1 and dt2 to mfcco
mfcco = [mfcco; dt1; dt2];
 
feature = mfcco';



% function definitions

function mels = mel(freq)
% change frequency from Hz to mel
mels = 1127 * log( 1 + (freq/700) );

% ---------------------------------------------------------------
function wins = sig2fm(input, winlen, winshft, frameno)

input = input(:);     
wins=zeros(winlen, frameno);

for i = 1 : frameno
    b = round((i-1) * winshft);
    c = min(winlen, length(input) - b);
    wins(1:c,i) = input(b+1 : min(length(input), b+winlen));
end

% ---------------------------------------------------------------

function fbank = initfiltb(numchan,fsamp,nfft)
% triangle shape melfilter initialization

fftfreqs = ((0:(nfft/2-1))/nfft)*fsamp;  % frequency of each fft point (1-fsamp/2)
melfft = mel(fftfreqs);   % mel of each fft point

mel0 = 0;                  
mel1 = mel(fsamp/2);       % highest mel 
melmid = ((1:numchan)/(numchan+1))*(mel1-mel0) + mel0; % middle mel of each filter

fbank = zeros(numchan,nfft/2); % initialize the filter bank matrix

for k = 2:(nfft/2)  % for each fft point, to all the filters,do this:
  chan = max([ 0 find(melfft(k)>melmid) ]); % the highest index of melfft that is larger than the middle mel of all channels
  if(chan == 0)  % only the first filter cover here
    fbank(1,k) = (melfft(k)-mel0)/(melmid(1)-mel0);
  elseif(chan == numchan)  % only the last filter covered here
    fbank(numchan,k) = (mel1-melfft(k))/(mel1-melmid(chan));
  else                   % for any other part, there will be two filter cover that frequency, in the complementary manner
    fbank(chan,k) = (melmid(chan+1)-melfft(k))/(melmid(chan+1)-melmid(chan));
    fbank(chan+1,k) = 1-fbank(chan,k);  % complementary
  end
end

% ---------------------------------------------------------------

function dt = deltacc(input, winlen)
% calculates derivatives of a matrix, whose columns are feature vectors

tmp = 0;
for cnt = 1 : winlen
    tmp = tmp + cnt*cnt;
end
nrm = 1 / (2*tmp);

dt   = zeros(size(input));
cols = size(input,2);
for col = 1 : cols
    for cnt = 1 : winlen
        inx1 = col - cnt; inx2 = col + cnt;
        if(inx1 < 1)
            inx1 = 1;     
        end
        if(inx2 > cols)  
            inx2 = cols;
        end
        dt(:, col) = dt(:, col) + (input(:, inx2) - input(:, inx1)) * cnt;
    end
end
dt = dt * nrm;

function Basis = get_basis_pcwise(Fs,nfft,winlen,sg1r,sg2r,f3r,sg1t,sg2t,f3t)

Fn = Fs/2;
f_hat = (0:nfft/2-1)*(Fs/nfft);
if(isnan(sg1t) || isnan(sg2t) || isnan(f3t))
    w = f_hat*2*pi/Fs;
else
    m1 = sg1r/sg1t;
    m2 = (sg2r - sg1r)/(sg2t - sg1t);
    m3 = (f3r - sg2r)/(f3t - sg2t);
    m4 = (Fn - f3r)/(Fn - f3t);
    band1 = f_hat <= sg1r;
    band2 = f_hat > sg1r & f_hat <= sg2r;
    band3 = f_hat > sg2r & f_hat <= f3r;
    band4 = f_hat > f3r;
    fband1 = f_hat(band1)/m1;
    fband2 = (f_hat(band2) - sg1r)/m2 + sg1t;
    fband3 = (f_hat(band3) - sg2r)/m3 + sg2t;
    fband4 = (f_hat(band4) - f3r)/m4 + f3t;
    w = [fband1 fband2 fband3 fband4]*2*pi/Fs;
end
Basis = zeros(length(w),winlen);
i = sqrt(-1);
for k = 1:length(w)
    Basis(k,:) = exp(-i*w(k)*(0:winlen-1));
end

function Basis = get_basis_linear(nfft,winlen,alpha,beta)

w0 = beta*pi;
while(alpha*w0 >= pi)
    beta = beta-0.02;
    w0 = beta*pi;
end    

w_hat = (2*pi/nfft)*(0:nfft/2-1);
Lt = w_hat <= alpha*w0;
Gt = w_hat > alpha*w0;
w1 = w_hat(Lt)/alpha;
w2 = (w_hat(Gt)*(pi-w0)-pi*w0*(alpha-1))/(pi-alpha*w0);
w = [w1 w2];
Basis = zeros(length(w),winlen);
i = sqrt(-1);
for k = 1:length(w)
    Basis(k,:) = exp(-i*w(k)*(0:winlen-1));
end
